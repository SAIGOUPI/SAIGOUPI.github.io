<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>赛狗屁的技术空间 | 游戏 WEB 金融</title>
    <description>欢迎来到赛狗屁的个人博客！这里是一个关于游戏开发、Web开发、经济学和金融的知识分享平台。</description>
    <link>https://saigoupi.github.io//</link>
    <atom:link href="https://saigoupi.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 28 Jul 2025 07:57:41 +0000</pubDate>
    <lastBuildDate>Mon, 28 Jul 2025 07:57:41 +0000</lastBuildDate>
    <generator>Jekyll v4.4.1</generator>
    
      <item>
        <title>关于博客主题的思考</title>
        <description>&lt;h2 id=&quot;新的主题&quot;&gt;新的主题&lt;/h2&gt;

&lt;p&gt;我放弃了之前的&lt;a href=&quot;https://github.com/jeffreytse/jekyll-theme-yat&quot;&gt;Jekyll-Yat主题&lt;/a&gt;，换成了现在的&lt;a href=&quot;https://github.com/zhonger/jekyll-theme-H2O-ac&quot;&gt;H2O-ac主题&lt;/a&gt;，先就这样吧，不折腾了，准备安心写文了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yat&lt;/code&gt;这个主题各方面都很好，甚至还支持了视频的markdown链接。&lt;/p&gt;

&lt;p&gt;可是我疏忽了最关键的一点，就是&lt;strong&gt;代码框&lt;/strong&gt;的样式。&lt;/p&gt;

&lt;p&gt;我用上之后才发现默认的样式很丑，然后我开始找配置，改样式，因为我对web前端不了解，所以全程让AI帮我改，改了两天，什么rouge，什么css都改了一便，可是最终还是不满意。我觉得我在这个牛角尖里越钻越深了，所以我索性换成了现在的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H20&lt;/code&gt;主题。&lt;/p&gt;

&lt;p&gt;在搭建博客这个事情上，我已经花了快一周的时间了，每次看到个新主题，我都想东改改西改改，折腾了一圈，jekyll的模板和框架都了解一遍，可是离我本来要做的事情越来越远。&lt;/p&gt;

&lt;p&gt;说回博客的主题，主题再花哨也是空壳，写博客最关键的还是内容，选个能用的主题，搭上直接开始写文，才是最重要的事情。&lt;/p&gt;

&lt;h2 id=&quot;一些思考&quot;&gt;一些思考&lt;/h2&gt;
&lt;p&gt;我个人有些强迫行为，在搭博客这件事情上也有所体现，换到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H20&lt;/code&gt;主题过程中，我也在SNS图标上纠结了好久，去看了主题的源码，了解了IconFont，对Jekyll的模板的认识也加深了。然后又想在博客园上同步文章，引发了图床，防盗链这些问题，于是又去看解决方案。因为我对web的了解很少，所以每一个知识点都是新的，每一个知识点又引出新的点，吸引我不断往下看。这些知识未来或许有用，但是现在都不是最高优先级。&lt;/p&gt;

&lt;p&gt;纠结了半天，只为换一个图标，传一张图片，我意识到自己又在钻牛角尖后，果断停止这一切，停止纠结这些表面的东西，开始按照计划学习新东西，打开vscode开始写文档，这些才是我的最高优先级。&lt;/p&gt;

&lt;p&gt;认识自己，才能改变自己。谨防提升技术的道路上这些吹毛求疵的行为，不要让他们影响到真正重要的事情。&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/new-blog-theme.html</link>
        <guid isPermaLink="true">https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/new-blog-theme.html</guid>
        
        <category>Jekyll</category>
        
        <category>博客</category>
        
        
        <category>博客</category>
        
      </item>
    
      <item>
        <title>使用Github Pages + Jekyll搭建个人博客</title>
        <description>&lt;h2 id=&quot;写在开头&quot;&gt;写在开头&lt;/h2&gt;

&lt;p&gt;最近在研究使用GitHub Pages搭建博客，好处有两点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;免费，简单，不用租服务器买域名，一键部署&lt;/li&gt;
  &lt;li&gt;教程多，出问题方便在网上找解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub Pages也支持很多博客框架，这里我用的官方推荐的Jekyll，当然用其他的Hexo，gitbook等等也都是可以的，网上教程也很多，部署流程也大同小异。&lt;/p&gt;

&lt;p&gt;今天总结一下我的搭建过程，以及中途遇到的一些坑，照着这篇文档，应该能一次搭建成功。&lt;/p&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;

&lt;p&gt;如果只是搭建一个最简单的博客，直接参考官方教程和以下教程即可，十分钟搞定直接开写：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zzy979481894/article/details/132678717&quot;&gt;使用Jekyll + GitHub Pages搭建个人博客&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.github.com/zh/pages/quickstart&quot;&gt;GitHub Pages快速入门&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是刚开始搭建博客时，总喜欢折腾一些好看的主题，Jekyll的主题很多，更换主题也很方便，但是还是会有一些小坑。&lt;/p&gt;

&lt;p&gt;最主要的问题就是&lt;a href=&quot;https://docs.github.com/zh/actions/tutorials&quot;&gt;GitHub Action&lt;/a&gt;的配置，Jekyll可以使用在线主题，但是github默认支持的在线主题很少，如果想用其他的主题，就要修改博客项目中的默认的Action和workflow的配置，保证博客仓库有更新时，github可以自动部署博客到网页上。&lt;/p&gt;

&lt;p&gt;解决问题的方式很简单，只是第一次遇到有点懵而已。具体参考了以下链接：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在这里找到自己喜欢的主题：&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll主题大全&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我使用的主题：&lt;a href=&quot;https://github.com/jeffreytse/jekyll-theme-yat&quot;&gt;Jekyll-yat主题&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用以上主题时，需要使用配套的Github Action配置：&lt;a href=&quot;https://github.com/jeffreytse/jekyll-deploy-action&quot;&gt;A GitHub Action to deploy the Jekyll site conveniently for GitHub Pages&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装Jekyll：&lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;Jekyll On Windows&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些疑难杂症的解决方案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ixiqin.com/2023/02/18/how-to-deal-with-making-the-action-report-remote-permission-denied-to-xx-x-to-making-the-actions-bot-problem/&quot;&gt;如何处理 Github Action 报出的 remote: Permission to xx x denied to github-actions[bot] 问题&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jeffreytse/jekyll-theme-yat/issues/177&quot;&gt;Error: Invalid CSS after “ @if meta”: expected “{“, was “.function-exist…” on line 72&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jeffreytse/jekyll-theme-yat/issues/173&quot;&gt;css conversion error with github pages&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装jekyll&quot;&gt;安装Jekyll&lt;/h2&gt;

&lt;p&gt;先在Ruby官网下载安装Ruby&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;Jekyll On Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在安装最后一步勾选以下选项&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在命令行中选3&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;检查是否安装成功，windows命令行运行&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
gem &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后更换ruby源为国内源，因为ruby默认的官方源在国外，不用梯子的话，下载速度非常慢！所以先更换为国内源，再下载Jekyll，打开命令行，输入以下命令添加ruby国内源&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; https://gems.ruby-china.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后输入以下命令移除官方源&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后使用以下命令查看已有的源&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来就可以安装Jekyll了，使用以下命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;提示安装完成后，检查是否安装成功&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此Jekyll安装完成&lt;/p&gt;

&lt;h2 id=&quot;安装jekyll-yat主题&quot;&gt;安装Jekyll-Yat主题&lt;/h2&gt;

&lt;p&gt;在github上新建一个博客仓库，克隆或者直接下载此主题的zip包&lt;a href=&quot;https://github.com/jeffreytse/jekyll-theme-yat&quot;&gt;Jekyll-yat主题&lt;/a&gt;，将此项目中的所有文件复制到自己的博客仓库。&lt;/p&gt;

&lt;p&gt;参考&lt;a href=&quot;https://github.com/SAIGOUPI/yat-blog/commit/98e81254675ddf3308b2312be9e81b284fefb584&quot;&gt;Jekyll-yat主题本地调试修改&lt;/a&gt;这个提交的修改，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;文件中再修改一次国内源，并添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;logger&quot;, &quot;~&amp;gt; 1.7&quot;&lt;/code&gt;和
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;bigdecimal&quot;, &quot;~&amp;gt; 3.2&quot;&lt;/code&gt;，修改后完整文件如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://gems.ruby-china.com/&quot;&lt;/span&gt;
gemspec

gem &lt;span class=&quot;s2&quot;&gt;&quot;logger&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.7&quot;&lt;/span&gt;

gem &lt;span class=&quot;s2&quot;&gt;&quot;bigdecimal&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 3.2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在根目录启动命令行，输入命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开始在本地添加博客网站运行的依赖项，提示安装完成后，执行命令&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就可以在本地&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:4000&lt;/code&gt;访问渲染后的博客网站&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，Yat主题初始化完毕&lt;/p&gt;

&lt;h2 id=&quot;部署博客到github-pages&quot;&gt;部署博客到GitHub Pages&lt;/h2&gt;

&lt;p&gt;来到自己的博客仓库，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;里第一行，修改仓库名字成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;就是github的账户名。一定要按照这个格式输入，这个名字也是访问此博客的域名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在部署GitHub Pages前，先回到自己的仓库，新建一个分支&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;，这个分支就用来部署博客页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分支创建完毕后，回到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上，需要修改一个文件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-jekyll.yml&lt;/code&gt;，路径如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将以下内容覆盖到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-jekyll.yml&lt;/code&gt;中，此配置来自Yat主题的作者&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jeffreytse/jekyll-deploy-action&quot;&gt;A GitHub Action to deploy the Jekyll site conveniently for GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用此Action就可以在master分支有更新时，通知github自动更新并部署博客页面到网站上，并且此配置也支持大部分Jekyll主题，部署时不会有报错：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and Deploy to Github Pages&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Here source code branch is `master`, it could be other branch&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build_and_deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v4&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Use GitHub Actions&apos; cache to cache dependencies on servers&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v4&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;.asdf/**&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;vendor/bundle&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-cache-${{ hashFiles(&apos;**/cache.key&apos;) }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;restore-keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-cache-&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Use GitHub Deploy Action to build and deploy to Github&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# For latest version: `jeffreytse/jekyll-deploy-action@master`&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jeffreytse/jekyll-deploy-action@v0.6.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;github&apos;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Default is github&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# It&apos;s your Personal Access Token(PAT)&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# Default is current repository&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gh-pages&apos;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Default is gh-pages for github provider&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;jekyll_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./&apos;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# Default is root directory&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;jekyll_cfg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_config.yml&apos;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Default is _config.yml&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;jekyll_baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# Default is according to _config.yml&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ruby_ver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;# Default is 3.2.0 version&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;bundler_ver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# Default is compatible bundler version (~&amp;gt;2.5.0)&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# Default is to not use a cname&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;actor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# Default is the GITHUB_ACTOR&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;pre_build_commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Installing additional dependencies (Arch Linux)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后又来到项目的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;中，进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General&lt;/code&gt;路径中，找到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Workflow permission&lt;/code&gt;，设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Read and write permissions&lt;/code&gt;。这样在部署时，github就不会有无法操作仓库的权限问题了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后一步了！进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pages&lt;/code&gt;路径，选择&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy from a branch&lt;/code&gt;，然后选择&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;，保存修改，大功告成~！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来到仓库的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;页面，找到刚刚修改的Action，点击右侧Run workflow，启动部署流程，部署完成后，可以在下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages-build-deployment&lt;/code&gt;里看到，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;分支已经部署完成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2025-07-23-build-blog/image-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后访问域名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;就可以访问自己的博客了~!&lt;/p&gt;

&lt;h2 id=&quot;本地写博客并更新到网站&quot;&gt;本地写博客并更新到网站&lt;/h2&gt;

&lt;p&gt;在本地仓库内根目录下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\_posts&lt;/code&gt;文件内，新建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date-blogTitle.md&lt;/code&gt;文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date&lt;/code&gt;是日期，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blogTitle&lt;/code&gt;是文章标题，打开文件，在文章顶部填写基本信息&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Another test markdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Each post also has a subtitle&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;markdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体格式，可以参考&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\_posts&lt;/code&gt;文件内的其他实例文章，都是主题自带的案例，有图片，视频，Jekyll的基本格式，markdown基础语法等例子可以参考。&lt;/p&gt;

&lt;p&gt;写好文章后，推送到github仓库上，就会触发Action的workflow，工作流执行完毕后（大约3分钟），就可以访问域名，查看更新后的博客了~&lt;/p&gt;

&lt;p&gt;至此，就已经成功搭建起自己的博客了，完事开头难，基础搭建起来后，之后的各种玩法的探索才有了可能。接下来可以专注于博客的写作上，可以参考markdown的语法:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://markdown.com.cn/basic-syntax/htmls.html&quot;&gt;Markdown语法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以美化一下自己的博客，学习一下Jekyll主题的修改和制作&lt;/p&gt;

&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;

&lt;p&gt;搭建博客时还是踩了不少坑，所以深知能从零搭起来才是最重要的，其他花里胡哨的外观主题都是次要的。按照这篇文章，应该能顺利地一次性搭建起来，如果有问题，可以看看这个仓库，里面的提交和文件都可以参考。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SAIGOUPI/yat-blog&quot;&gt;Yat主题博客案例仓库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外，现在的我在用vscode写这篇文章时，发现vscode写markdown真的非常方便，原生就支持直接粘贴图片到文章内，附上文档链接&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7244809769794289721&quot;&gt;vscode支持Markdwon中直接粘贴图片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感谢看到这里~！!&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/build-blog.html</link>
        <guid isPermaLink="true">https://saigoupi.github.io/%E5%8D%9A%E5%AE%A2/build-blog.html</guid>
        
        <category>Jekyll</category>
        
        <category>博客</category>
        
        
        <category>博客</category>
        
      </item>
    
  </channel>
</rss>
